# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: CI-CD workflow

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    # .env - secret 방식으로 추가하기
    - name: 'Create env file'
      run: |
        touch .env
        echo DB_URL=${{ secrets.DB_URL }} >> .env
        echo DB_USERNAME=${{ secrets.DB_USERNAME }} >> .env
        echo DB_PWD=${{ secrets.DB_PWD }} >> .env
        echo JWT_SECRET=${{ secrets.JWT_SECRET }} >> .env
        echo MAIL_USERNAME=${{ secrets.MAIL_USERNAME }} >> .env
        echo MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }} >> .env
        cat .env
          
    # 그래들 빌드
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      run: ./gradlew bootJar
      
      
      # 도커허브 로그인
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{secrets.DOCKER_USERNAME}}
        password: ${{secrets.DOCKER_TOKEN}}

      # 그래들 빌드 이미지 만들어 도커허브로 업로드
    - name: build and release to DockerHub
      env:
        NAME: ${{ secrets.DOCKER_USERNAME }}  # DockerHub 계정 명
        REPO: waffle #  DockerHub 레포 이름
      run: |
        docker build -t $REPO .
        docker tag $REPO:latest $NAME/$REPO:latest
        docker push $NAME/$REPO:latest
        
      # EC2 Create 명령 실행
    - name: Github Action to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.AWS_HOST }}
        username: ${{ secrets.AWS_USER }}
        key: ${{ secrets.AWS_SSH_KEY }}
        port: ${{ secrets.AWS_PORT }}
        script: |
          bash deploy.sh
